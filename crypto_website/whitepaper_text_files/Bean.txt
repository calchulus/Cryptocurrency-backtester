Enigma v1.0
A private, secure and untraceable transaction system for CloakCoin.
18th February 2017
1. Abstract
CloakCoin is a cryptocurrency designed to facilitate private, secure and untraceable decentralized transfers with Enigma.
Cloak is a dual PoW/PoS (Proof of Work, Proof of Stake) coin, which is now in the Proof-of-Stake (interest bearing) stage. Enigma is CloakCoin's private, secure and untraceable payment system, that forms the basis of future development and provides the underlying transaction system for the decentralized applications running on the CloakCoin network.

Privacy today is perhaps more important than ever. The thundering pace of technological advancement has rapidly broadened our horizons and connected the world like never before. Thanks to Bitcoin's introduction in 2009, cryptocurrency is steadily moving into the mainstream and we can now transfer digital currency securely across the globe in an instant, using the power of the blockchain. As cryptocurrency adoption becomes more widespread, increased regulation is inevitable. It remains to be seen what form this regulation will take, but many are concerned it may be overly draconian and designed to stifle some of the more libertarian aspects of cryptocurrency.
Due to Bitcoin's quest for ubiquity, anonymity for users has never been a priority for the core Bitcoin developers. This has led to the emergence of a number of privacy-centric, alternative cryptocurrencies, designed with anonymity in mind. There are many different methodologies and approaches to solving the problem of anonymous transactions, and in this document we present a full overview of CloakCoin's Enigma system.
Enigma is at heart a decentralized, off-blockchain mixing service which allows users on the CloakCoin network to transmit Cloak privately and securely to each other. It has been designed to ensure the mixing process is both secure and untraceable to third party observers. This ensures a user's Cloak coins are kept safe during transfer and that the sender and receiver cannot be tied or associated. Cloak coins are never transferred to an intermediate party during Cloaking, so coins remain safe. We have also worked hard to ensure the Enigma system rewards users who assist in Cloaking transfers and will continue to improve the process and further incentivize active participants. Anyone with Cloak coins can participate in Cloaking operations, which allows them to leave their wallet running in Staking/Cloaking mode to allow it to passively assist in Cloaking and earn significant rewards.

2. Enigma v1.0 Overview
Enigma is the first public iteration of Cloak's private, secure and untraceable payment system. Enigma transactions are `cloaked' by other users, who receive a reward for their assistance. The other users provide inputs and outputs to the Enigma transaction making it impossible to determine the true source and destination of the cloak transfer. All Enigma messages on the network are hashed and encrypted for the recipient using CloakShield to ensure data security and integrity. Please see Section 3 ­ 'CloakShield' for more details.
2.1. The Enigma Process (for Enigma enabled nodes)
Enigma Announcements Enigma nodes communicate over the Cloak network and a node will keep track of other active Enigma nodes. Enigma Announcement Broadcasts alert other Enigma nodes of our public session key and current Enigma cloaking balance.

Enigma Cloaking Requests When a user wishes to send a Cloaked Enigma transaction, they elect a series of Enigma nodes (with a high enough Enigma balance) and request their assistance in cloaking. A Enigma node can choose to assist in cloaking and send an acceptance response to the requester to indicate this. If a Enigma node declines to participate in cloaking or does not respond in a timely manner, an alternate Enigma node is elected and contacted. DDoS (distributed denial of service) protection will blacklist any misbehaving nodes for the remainder of the session. A node is deemed to be misbehaving if it repeatedly refuses to sign a Enigma transaction or refuses to relay Enigma messages. Enigma cloaking nodes use an Elliptic Curve Diffie Hellman key exchange (ECDH) to derive a shared secret with the Enigma initiating node, which is used to generate a shared secret key for symmetric RSA-256 data encryption between a cloaking node and the sender node.
Enigma Cloaking Acceptance When a Enigma node accepts a 'cloaking' request, it provides a list of transaction inputs and outputs to be used for the Enigma transaction. Input amounts provided by a cloaking node must be greater or equal to the Enigma send amount (plus any fees). Outputs are carefully selected so that they match the true output of the Enigma transaction as closely as possible. If the Enigma output address has not previously been used, a new change address is generated by the 'Cloaker'. If the Enigma output address has previously received funds, an existing address with similar activity is chosen by the 'Cloaker' to return their input funds and receive the Enigma 'cloaking' reward.
The 'Cloaked' Enigma Transaction The Enigma Sender constructs a 'cloaked' transaction using the inputs and outputs provided by the Enigma Cloaker nodes. The Enigma Sender then adds their own inputs and outputs to the transaction, before shuffling all transaction inputs and outputs to facilitate 'cloaking'. The 'cloaked' transaction is then encrypted and sent (using CloakShield) to each participating Cloaker. Cloaker nodes check the transaction to ensure the inputs and outputs they supplied are present in the 'cloaked' transaction and that one or more of their outputs has also been rewarded with sufficient fees. If the transaction checks are passed, the transaction is signed (SIGHASH_ALL+SIGHASH_ANYONECANPAY), encrypted and relayed back to the Enigma Sender. Once all Enigma Cloakers have signed the transaction, the Enigma Sender confirms the signed transaction is valid and signs it. The 'Cloaked' transaction is then ready for submission to

the Cloak network.
2.2.1. Tracking Enigma Cloaking Nodes
Enigma enabled nodes on the Cloak network broadcast announcements to other nodes. These Enigma announcements contain the public ec-key ID of the node and the currently available balance for Enigma cloaking operations. Nodes maintain a list of other active Enigma nodes on the network so that they can communicate for cloaking purposes. Nodes IDs are generated on a session-by-session basis; restarting the client will refresh the current ID.
1. Each wallet creates a public/secret (secp256k1) key pair for the session at start-up. 2. The wallet announces its public key and Cloaking balance for the session periodically
to other nodes on the Cloak network.
3. Nodes keep track of other active Enigma Cloaking nodes and can communicate with them directly or indirectly (via CloakShield Onion Routing).
2.2.2. Initiating a Enigma Transaction
Alice wishes to send 10 Cloak to Catherine using 1 mixer:
1. Alice broadcasts a Enigma request to the network, containing her public Enigma session key and the amount of cloak she wishes to send. Her request is securely routed through a series of Enigma nodes to mask the originator.
2. Bob has `Cloaking Mode' enabled and creates a secure CloakShield encryption channel for secure communication with Alice. Bob then constructs a Enigma response packet and sends it securely to Alice. The response contains a list of Bob's inputs and outputs that Alice will use to `Cloak' her transaction.
3. Alice decrypts and processes Bob's Enigma response and creates a Enigma transaction using her own inputs and outputs mixed with Bob's inputs and outputs. This is encrypted and sent to Bob for signing.

4. Bob decrypts the Enigma transaction and performs a number of integrity checks on the transaction to ensure the inputs and outputs he supplied have been used correctly and that he has been rewarded sufficiently. If the Enigma transaction passes the tests, Bob signs it, encrypts it and transmits it to Alice.
5. Alice performs further checks on the signed transaction before signing it herself. The transaction is then submitting it to the network (securely routed through Enigma nodes) for inclusion in a block.
6. When the transaction is finalized, Catherine will receive the funds from Alice and Bob will receive a `Cloaking' reward for assisting in the Enigma transaction.
7. Due to Bob's inputs and outputs mirroring Alice's, it is not possible to ascertain the true sender and recipient of the Enigma transaction.
3. CloakShield
CloakShield provides secure communications between nodes on the Cloak network using symmetric RSA encryption backed by an Elliptic Curve Diffie Hellman key exchange (ECDH). This allows nodes to exchange data securely, providing protection from snoopers ( man in the middle) and imposters (sybil attack). CloakShield is designed to secure both Enigma and decentralized CloakCoin applications, and will ensure your data stays as private as possible.

CloakShield allows the encrypted sending of data to one or more recipients. When sending to a single recipient, the payload is RSA encrypted using the ECDH shared secret. When sending to multiple recipients, the payload is encrypted using a one-time key and the key is then encrypted for each recipient using the ECDH/RSA method.
Generating a shared encryption key
In order for Alice and Bob to communicate securely, they must agree on a shared encryption key. CloakShield uses ECDH to accomplish this:
· Alice has Enigma private key d A and Enigma public key Q A=dAG (where G is the generator for the elliptic-curve). Bob has Enigma private key dB and Enigma public key QB=dBG.
· Alice has Bob's Enigma public key d B from the Enigma announcements he sends to the network to announce his availability for cloaking assistance. She uses her private key d A and Bob's public key QB to calculate shared secret dAQB=dAdBG (ECDH_compute_key in OpenSSL).
· Alice then creates a SHA256 hash of the secret and passes the hash to the OpenSSL
EVP_BytesToKey method in order to derive an encryption key and IV, which will be used to encrypt data for Bob (using symmetric RSA encryption).
· Alice is now able to create CloakShield secured messages for Bob.
When Bob receives a Cloak Shielded message from Alice, he reads Alice's public key from the message header and generates the same shared secret key as Alice, as per the steps above (with his secret key, instead of Alice's). The Cloak wallet maintains a list of active CloakShield keys and will check the list for an existing CloakShield key before generating one.

CloakShield Data
CloakShield allows any Cloak data objects to be serialized and transmitted securely to one or more recipients. A CloakShield data packet-header contains the sender's Enigma public key and the public keys hashes of the recipients.
CloakShield headers contain a verification hash, which is generated using the sender's public key and the raw unencrypted data. This hash is verified during decryption of CloakShield data to ensure that the recipient info in the header matches the encryption key, and that the data has not been altered.
CloakShield Onion Routing
Onion routing is a technique (used by TOR) for anonymous communication over a computer network. In an onion network, messages are encapsulated in layers of encryption, analogous to layers of an onion. The encrypted data is transmitted through a series of network nodes called onion routers, each of which "peels" away a single layer, uncovering the data's next destination. When the final layer is decrypted, the message arrives at its destination. The sender remains anonymous because each intermediary knows only the location of the immediately preceding and following nodes.

Onion Routing Analogy
The addition of 'onion routing' functionality to the Enigma network (using CloakShield) allows nodes to communicate indirectly to circumvent traffic analysis. This hampers attempts at determining which nodes are communicating with each other or which nodes submitting transactions to the CloakCoin network. When a Enigma n ode wishes to communicate with another Enigma n ode it selects a number of other Enigma n odes to act as relays for the communication. Each encrypted layer can only be decrypted by the intended relay [for which the specific layer was encrypted]. After decrypting a layer, the relay passes the data to the next relay node. This routing continues it until the data reaches its intended recipient and all layers have been decrypted in turn by the selected relay nodes. Due to the self-contained nature of the Enigma network, exit nodes are not required and CloakShield ensures there is no risk of a relay node reading or altering the encrypted data
Alice onion routing a message to Bob via Catherine and Dan (Catherine and Dan are arbitrarily selected Enigma nodes used for illustration)

4. Engima Illustrated (high-level overview)
Step 1 - Request Cloaking: Enigma Request from Sender and Response from Cloaker

Step 2 - Enigma TX Signing: Enigma Sign Request from Sender and Enigma Sign Response from Cloaker

Step 3 - Sender Signs Enigma TX, relays TX to Cloakers and submits TX to CloakCoin network

5. The Future of Enigma ­ Further Development
Enigma forms the core of CloakCoin and will continue to be developed and improved as we move forward with CloakCoin. Here are some of the features planned for future revisions:
Improved Proof-of-Stake Algorithm
Proof of Stake (PoS) is a method of securing a cryptocurrency network that relies upon users showing ownership of coins in order to sign blocks. In the long run, the probability of signing blocks is proportional to the amount of coins owned, someone owning 1% of total coin supply will be able to sign 1% of all proof of stake blocks. Compared to proof of work approach, proof of stake requires significantly less computational power, and thus less energy usage.
Coin Age and Linear Proof-of-Stake
Fundamental to most implementations of Proof of Stake, including that of CloakCoin, is the concept of Coin Age. Essentially, this is a measure of how long a coin holder has held onto coins without spending or moving them. From the time a transaction is completed, coins that were part of that transaction begin to accumulate Coin Age (which starts at zero). In its simplest form, entitled "linear coin age", coins will accumulate a minute/hour/day/year of Coin Age each minute/hour/day/year of age. For example, a person that holds 365 coins for 100 days accumulates 36,500 'coin days', or approximately 100 'coin years' (A 'coin year' is defined to account for leap years, and thus is not exactly 365 days, but ~365.24 days).
Linear Proof-of-Stake designs have attracted criticism in relation to Coin Age. Many argue that linear Proof-of-Stake encourages hoarding of coins (which can have a detrimental effect on trade and transfer volume). Another valid complaint against linear Proof-of-Stake relates to the effect it can have on network security. Linear Proof-of-Stake implementations often suffer due to users periodically connecting to the Cloak network to stake their coins and then disconnecting once all Coin Age has been destroyed. The user then waits until Coin Age has replenished before repeating the connect-stake-disconnect process. This does not provide the best security for the network, and a Proof-of-Stake algorithm that rewards frequent or constant staking would be most beneficial to CloakCoin and related Proof-of-Stake currencies.

To ensure Enigma Cloakers are rewarded as amply as possible, Coin Age should be removed from CloakCoin's Proof-of-Stake algorithm. This would ensure that Cloakers receive both the full staking reward and any Enigma Cloaking rewards. The additional incorporation of a velocity component in calculating staking rewards would further reward active Enigma Cloaking nodes, encouraging users to participate in Enigma Cloaking to further increase their earned interest in addition to earned Cloaking rewards. In addition to providing greater rewards to actively participating users, an improved Proof-of-Stake algorithm also provides the aforementioned improvements to network security.
Combining and Splitting Enigma Transactions
Enigma currently creates a single 'Cloaked' transaction per transfer. We are currently working on an update to the Enigma framework that will allow multiple Enigma transactions to be combined into a Enigma super-transaction. This will effectively contain multiple 'Cloaked' transactions and provide even greater anonymity for Cloak users. This extension will allow users to select the number of co-operative Enigma transactions they require in addition to the number of Cloakers.
This addition of course remains fully decentralized, private and secure.
Another Enigma sending enhancement currently being fleshed-out by the Cloak Team is the ability to 'Cloak' a large amount of Cloak as a series of smaller Enigma transactions. To achieve this, a user would choose the amount of Cloak they would like to send Cloaked to an address. CloakCoin would then work in the background to create a number of smaller Enigma transactions of an even amount, which can be Cloaked and submitted to the Cloak network over a set period of time. This batching process will be compatible with 'combined' Enigma transactions, providing further Cloaking protection for transfers.

Deterministic Wallet Addresses
Enigma utilizes change addresses as part of the Cloaking process. The addition of a hierarchical deterministic wallet (see BIP 0032) will allow a wallet to be recreated using the same 12-word mnemonic of common English words. This will preserve change address keys without the need to backup the wallet itself.
6. FAQ
Q. How do Cloakers assist a Enigma transaction? A.  Cloakers provide one or more inputs that are used to `Cloak' the input from the sender. Cloakers also supply a series of return addresses which return their input and also reward the Cloaker with a fee. The return addresses are chosen carefully in order to prioritize addresses with activity. This makes it much harder for anyone performing blockchain analysis to pinpoint the true output of a Enigma transaction. The Enigma system will also check the target address so that `cloaked' outputs mirror the true output as closely as possible.
Q. How long do Enigma transactions take to complete? A. E nigma transactions are currently allotted one minute to complete. Cloaking nodes helping to `Cloak' a Enigma transaction will reserve the necessary funds until the Enigma transaction completes or the allotted time expires. In the case of an expired or aborted Enigma transaction, funds are unlocked locally for re-use.
Q. How does Enigma affect staking? A.  A ny coins used in a Enigma transaction (as a Sender or Cloaker) will have their coin-age reset. It s hould be noted however, that participating in Cloaking should provide a much higher return than staking. The Cloak Team is working to revise the Enigma algorithm for the upcoming hard-fork release (Enigma 1.1). Please see Section 5 - 'The Future of Enigma ­ Further Development' for more details.

Q.  Do I need a certain amount of Cloaks in my wallet balance to be a Enigma Cloaker? A.  You can offer your services for Cloaking regardless of the balance in your CloakCoin wallet. W hen Enigma Cloaking is enabled, CloakCoin will reserve a portion of your balance for participating in Enigma Cloaking, for which you will earn a Cloaking reward. The default reserve amount is ~50%, but this value can be adjusted by the user. The chosen value with be randomized in order to prevent linking of Enigma announcements by advertised Cloaking balance. It should be noted that wallets with a higher balance have a higher chance of being chosen as a Cloaker as they are more likely to have the required Cloaking balance available for larger Enigma transactions.
Q.  How does this protect against a time based attack where someone looks on the blockchain for identical inputs and outputs? Would it not be possible to discern the destination this way? A.  Enigma transactions group the outputs and are ensured to have multiple matching output a mounts to `cloak' the recipient's output.
Q.  Can the originator of a Enigma transaction be determined by examining the script signature to determine signing order? A. No. During the signing process, script signature order is randomized when combining the signatures. The sender and the participating Cloakers do this.
Q.  Can an eavesdropper monitor the network to watch for outgoing Enigma transactions being submitted to the network to determine the true sender? A.  N o. All parties in a random order submit an Enigma transaction to the network. This provides mitigation against such eavesdropping attacks.
Q.  What is the fee for a Enigma transaction? A. T he Enigma transaction fee is 1.8% of the sent amount, plus network fees. This is used to r eward Enigma nodes that assist with cloaking a Enigma transaction.

Q.  Does Enigma require a hard-fork of the Cloak network? A.  N o. Older CloakCoin clients will handle Enigma transactions without issues, but they will not be able to create them or participate in 'cloaking' them. The next revision of Enigma however, will require a hard-fork due to changes to the underlying Proof-of-Stake algorithm, and support for additional script opcodes for market features (such as Block Escrow).
Q.  How does Enigma protect against 'bad actors'? A. The Enigma system features extensive DDoS protection to 'blacklist' nodes for the duration of a session. If a Enigma node repeatedly refuses to sign, they will be excluded from Enigma Cloaking invitations for the remainder of the current session. We are currently researching additional methodologies for further penalizing uncooperative Enigma nodes and will likely implement a system that requires Cloakers to escrow a nominal, refundable fee that could be claimed as a penalty in instances where a node attempts to block a Enigma transaction by refusing to sign the finalized transaction. It should be noted that whilst malicious nodes may attempt to hamper a Enigma transaction, they are not able to steal or misappropriate any funds.
Q. What is the maximum number of Cloakers that can assist in a Enigma transaction? A. The maximum number of Cloakers is fixed at 25. The Enigma system is flexible and this number can easily be extended.

5. References
[01] http://bitcoin.org
[02] https://en.bitcoin.it/wiki/Category:Mixing Services
[03] https://wiki.openssl.org/index.php/Elliptic_Curve_Diffie_Hellman
[04] http://blog.ezyang.com/2012/07/secure-multiparty-bitcoin-anonymization [05] http://blog.atmel.com/2014/10/21/ecdh-key-exchange-is-practical-magic [06] https://bitcointalk.org/index.php?topic=279249.0 (CoinJoin: Bitcoin privacy for the real world) [07] https://bitcointalk.org/index.php?topic=27787.0 (Proof of stake instead of proof of work) [08] https://en.bitcoin.it/wiki/Proof_of_Stake
[9] https://en.bitcoin.it/wiki/Deterministic_wallet
[10] https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki
[11] http://www.onion-router.net

